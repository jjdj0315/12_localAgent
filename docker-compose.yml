services:
  postgres:
    image: postgres:15
    container_name: llm-webapp-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-llm_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-llm_webapp}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-llm_app}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: llm-webapp-backend
    environment:
      USE_SQLITE: "false"
      POSTGRES_USER: ${POSTGRES_USER:-llm_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-llm_webapp}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      SESSION_TIMEOUT_MINUTES: ${SESSION_TIMEOUT_MINUTES:-30}
      LLM_BACKEND: llama_cpp
      GGUF_MODEL_PATH: /models/qwen2.5-3b-instruct-q4_k_m.gguf
      LLAMA_N_THREADS: 8
      LLAMA_N_CTX: 2048
      LLAMA_N_GPU_LAYERS: 0
      ENABLE_LORA: "false"
      PER_USER_QUOTA_GB: ${PER_USER_QUOTA_GB:-10}
      TOTAL_STORAGE_CAPACITY_GB: ${TOTAL_STORAGE_CAPACITY_GB:-500}
      ENABLE_ML_FILTER: "true"
      FILTER_SENSITIVITY: balanced
      ORCHESTRATOR_ROUTING_MODE: llm
      AGENT_TIMEOUT: 300
      MAX_SEQUENTIAL_AGENTS: 5
      MAX_PARALLEL_AGENTS: 3
    volumes:
      - ./backend/app:/app/app
      - ./backend/alembic:/app/alembic
      - ./backend/scripts:/app/scripts
      - ./models:/models:ro
      - uploads_data:/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Creating initial admin user...' &&
        python scripts/create_admin.py --username admin --password admin123! 2>/dev/null || true &&
        echo 'Verifying GGUF model...' &&
        ls -lh /models/qwen2.5-3b-instruct-q4_k_m.gguf &&
        echo 'Starting backend server with llama.cpp...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: llm-webapp-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  uploads_data:

networks:
  default:
    name: llm-webapp-network
